%{
 ______                __                     ____               __        
/\__  _\              /\ \                   /\  _`\            /\ \       
\/_/\ \/    __   _____\ \ \___   _ __    __  \ \ \_\ \_ __   ___\ \ \____  
   \ \ \  /'__`\/\ '__`\ \  _ `\/\`'__\/'__`\ \ \ ,__/\`'__\/ __`\ \ '__`\ 
    \ \ \/\  __/\ \ \_\ \ \ \ \ \ \ \//\ \_\.\_\ \ \/\ \ \//\ \_\ \ \ \_\ \
     \ \_\ \____\\ \ ,__/\ \_\ \_\ \_\\ \__/.\_\\ \_\ \ \_\\ \____/\ \_,__/
      \/_/\/____/ \ \ \/  \/_/\/_/\/_/ \/__/\/_/ \/_/  \/_/ \/___/  \/___/ 
                   \ \_\                                                   
                    \/_/                                                   
___________________________________________________________________________

Name:       get_prefs.m
Purpose:    Set preferences of the TephraProb package
Author:     Sebastien Biass
Created:    April 2015
Updates:    April 2016:     Added the option to scale colormaps and plot the
                            grid extent
Copyright:  Sebastien Biass, University of Geneva, 2015
License:    GNU GPL3

This file is part of TephraProb

TephraProb is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    TephraProb is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with TephraProb.  If not, see <http://www.gnu.org/licenses/>.
%}


function get_prefs
% Check that you are located in the correct folder!
if ~exist([pwd, filesep, 'tephraProb.m'], 'file')
    errordlg(sprintf('You are located in the folder:\n%s\nIn Matlab, please navigate to the root of the TephraProb\nfolder, i.e. where tephraProb.m is located. and try again.', pwd), ' ')
    return
end

global p

%%%%%%%%%%%%%%%%%%%%%%%
scr = get(0,'ScreenSize');
wd   = 750;
h    = 500;
p.fig = figure(...
    'position', [scr(3)/2-wd/2 scr(4)/2-h/2 wd h],...
    'Color', [.25 .25 .25],...
    'Resize', 'off',...
    'Tag', 'Configuration',...
    'Toolbar', 'none',...
    'Menubar', 'none',...
    'Name', 'TephraProb Preferences',...
    'NumberTitle', 'off');

p.pan = uipanel(...
    'units', 'normalized',...
    'position', [.025 .025 .95 .95],...
    'title', 'Preferences',...
    'BackgroundColor', [.25 .25 .25],...
    'ForegroundColor', [.9 .5 0],...
    'HighlightColor', [.9 .5 0],...
    'BorderType', 'line');


    p.pan_prob = uipanel(...
        'Parent', p.pan,...
        'units', 'normalized',...
        'position', [.02 .15 .47 .825],...
        'BackgroundColor', [.25 .25 .25],...
        'ForegroundColor', [.5 .5 .5],...
        'HighlightColor', [.3 .3 .3],...
        'Title', 'Probability calculations',...
        'BorderType', 'line');

        p.mass_th_txt = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .9 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Mass thresholds for probability calculations (kg/m2):');

        p.mass_th = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.05 .8 .9 .08],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35],...
            'Tooltip', 'Enter comma delimited mass thresholds');

        p.prob_th_txt = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .7 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Probability thresholds for probabilistic isomass maps:');

        p.prob_th = uicontrol(...
            'parent', p.pan_prob,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.05 .6 .9 .08],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35],...
            'Tooltip', 'Enter comma delimited probability thresholds');


        
p.pan_map = uipanel(...
    'Parent', p.pan,...
    'units', 'normalized',...
    'position', [.51 .15 .47 .825],...
    'BackgroundColor', [.25 .25 .25],...
    'ForegroundColor', [.5 .5 .5],...
    'HighlightColor', [.3 .3 .3],...
    'Title', 'Map display',...
    'BorderType', 'line');



        p.prob_ctr_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .9 .6 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Contours of probability maps:');
        
        p.prob_scale_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.725 .9 .2 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Scale colors?');

        p.prob_scale = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.725 .8 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 1,...
            'Tooltip', 'When plotting the results, scale the colormap across the minimum and maximum specified probabilities');

        p.prob_ctr = uicontrol(...
            'parent', p.pan_map,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.05 .8 .6 .08],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35],...
            'HorizontalAlignment', 'center');

        p.pim_ctr_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .7 .6 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Contours of isomass maps (kg/m2):');
        
        p.pim_scale_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.725 .7 .2 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Scale colors?');
        
        p.pim_scale = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.725 .6 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 0,...
            'Tooltip', 'When plotting the results, scale the colormap across the minimum and maximum specified isomass values');

        p.pim_ctr = uicontrol(...
            'parent', p.pan_map,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.05 .6 .6 .08],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35]);

        p.min_prob_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .5 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Minimum probability to plot:');

        p.min_prob = uicontrol(...
            'parent', p.pan_map,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.05 .4 .9 .08],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35]);

        p.min_mass_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .3 .9 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Minimum mass accumulation to plot (kg/m2):');

        p.min_mass = uicontrol(...
            'parent', p.pan_map,...
            'style', 'edit',...
            'unit', 'normalized',...
            'position', [.05 .2 .9 .08],...
            'HorizontalAlignment', 'left',...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.35 .35 .35]);

        p.plot_extent_txt = uicontrol(...
            'parent', p.pan_map,...
            'style', 'text',...
            'units', 'normalized',...
            'position', [.05 .1 .6 .05],...
            'HorizontalAlignment', 'left',...
            'BackgroundColor', [.25 .25 .25],...
            'ForegroundColor', [1 1 1],...
            'String', 'Plot the extent of the computation grid?:');
        p.plot_extent = uicontrol(...
            'parent', p.pan_map,...
            'style', 'checkbox',...
            'unit', 'normalized',...
            'position', [.725 .095 .1 .08],...
            'ForegroundColor', [1 1 1],...
            'BackgroundColor', [.25 .25 .25],... 
            'Value', 1);
        
p.but_ok = uicontrol(...
    'parent', p.pan,...
    'Style', 'pushbutton',...
    'units', 'normalized',...
    'position', [.85 .025 .13 .1],...
    'BackgroundColor', [.3 .3 .3],...
    'ForegroundColor', [.9 .5 .0],...
    'String', 'Ok');

p.but_default = uicontrol(...
    'parent', p.pan,...
    'Style', 'pushbutton',...
    'units', 'normalized',...
    'position', [.7 .025 .13 .1],...
    'BackgroundColor', [.3 .3 .3],...
    'ForegroundColor', [.9 .5 .0],...
    'String', 'Default');

if exist(['CODE', filesep, 'VAR', filesep, 'prefs.mat'], 'file')
    parse_data('prefs')
else
    parse_data('prefs_default')
end

set(p.but_ok, 'callback', {@but_ok, p})
set(p.but_default, 'callback', {@but_default, p})

function but_ok(~, ~, p)

prefs.prob.mass_thresh  = cell2mat(cellfun(@str2num,strsplit(get(p.mass_th, 'String'), ','),'un',0));
prefs.prob.prob_thresh  = cell2mat(cellfun(@str2num,strsplit(get(p.prob_th, 'String'), ','),'un',0));

prefs.maps.prob_contour = cell2mat(cellfun(@str2num,strsplit(get(p.prob_ctr, 'String'), ','),'un',0));
prefs.maps.mass_contour = cell2mat(cellfun(@str2num,strsplit(get(p.pim_ctr, 'String'), ','),'un',0));

prefs.maps.min_prob     = cell2mat(cellfun(@str2num,strsplit(get(p.min_prob, 'String'), ','),'un',0));
prefs.maps.min_mass     = cell2mat(cellfun(@str2num,strsplit(get(p.min_mass, 'String'), ','),'un',0));

prefs.maps.scale_prob   = get(p.prob_scale, 'Value');
prefs.maps.scale_pim    = get(p.pim_scale, 'Value');

prefs.maps.plot_extent  = get(p.plot_extent, 'Value');

save(['CODE', filesep, 'VAR', filesep, 'prefs.mat'], 'prefs');

close(gcbf)

function but_default(~, ~, ~)
parse_data('prefs_default')

function parse_data(file)
global p

load(['CODE', filesep, 'VAR', filesep, file]);

% Prob calculations - Mass threshold
tmp = sprintf('%.2f,' , prefs.prob.mass_thresh);
set(p.mass_th, 'String', tmp(1:end-1));

% Prob calculations - Prob threshold
tmp = sprintf('%.2f,' , prefs.prob.prob_thresh);
set(p.prob_th, 'String', tmp(1:end-1));

% Map display - Prob threshold
tmp = sprintf('%.2f,' , prefs.maps.prob_contour);
set(p.prob_ctr, 'String', tmp(1:end-1));

% Map display - IM threshold
tmp = sprintf('%.2f,' , prefs.maps.mass_contour);
set(p.pim_ctr, 'String', tmp(1:end-1));

% Map display - Min prob
tmp = sprintf('%.2f,' , prefs.maps.min_prob);
set(p.min_prob, 'String', tmp(1:end-1));

% Map display - Min mass
tmp = sprintf('%.2f,' , prefs.maps.min_mass);
set(p.min_mass, 'String', tmp(1:end-1));

% Scaling
set(p.prob_scale, 'Value', prefs.maps.scale_prob);
set(p.pim_scale, 'Value', prefs.maps.scale_pim);
set(p.plot_extent, 'Value', prefs.maps.plot_extent);